import soccer_robot_perception.datasets.detection_dataset
import soccer_robot_perception.datasets.segmentation_dataset
import soccer_robot_perception.data_loader.data_loader
import soccer_robot_perception.transforms.transforms
import soccer_robot_perception.architectures.nimbro2
import soccer_robot_perception.architectures.location_aware_conv2d
import soccer_robot_perception.train_manager.train_model
import soccer_robot_perception.utils.detection_utils
import soccer_robot_perception.utils.segmentation_utils

INPUT_HEIGHT = 480
INPUT_WIDTH = 640

NUM_SEG_CLASSES = 3
NUM_DET_CLASSES = 3

RUN_NAME = "soccer-robot"
WANDB_KEY = "2aeb47c951aa8a38cedb69c0a8732f798c4bb052"

# Data transformation
TRANSFORM_CONFIGURATION = {
'0': {'transform_type': 'Resize', 'params': {'output_size': [%INPUT_HEIGHT, %INPUT_WIDTH]}},
}
configure_transforms.config = %TRANSFORM_CONFIGURATION

# Dataset
DetectionDataset.root_dir = '/scratch/dpadma2s/cuda_data/data/blob/'
DetectionDataset.transform = @configure_transforms()

SegmentationDataset.root_dir = '/scratch/dpadma2s/cuda_data/data/segmentation/'
SegmentationDataset.transform = @configure_transforms()

DETECTION_DATASET = @DetectionDataset()
SEGMENTATION_DATASET = @SegmentationDataset()

# DataLoader
torch.utils.data.ConcatDataset.datasets = [%DETECTION_DATASET, %SEGMENTATION_DATASET]
get_train_valid_test_loader.dataset = @torch.utils.data.ConcatDataset()
get_train_valid_test_loader.collate_fn=@custom_collate_alldata
#get_train_valid_test_loader.dataset = %DETECTION_DATASET
#get_train_valid_test_loader.collate_fn=@custom_collate_detection
#get_train_valid_test_loader.dataset = %SEGMENTATION_DATASET
#get_train_valid_test_loader.collate_fn=@custom_collate_segmentation
get_train_valid_test_loader.batch_size = 32
get_train_valid_test_loader.random_seed = 39248
get_train_valid_test_loader.valid_size = 0.3
get_train_valid_test_loader.test_size = 0.2
get_train_valid_test_loader.num_workers = 0

DATA_LOADERS = @get_train_valid_test_loader()

# Architecture
NimbRoNet2.input_width = %INPUT_WIDTH
NimbRoNet2.input_height = %INPUT_HEIGHT
NimbRoNet2.location_awareness = True

# DETECTION UTILS
det_label_preprocessor.input_width = %INPUT_WIDTH
det_label_preprocessor.input_height = %INPUT_HEIGHT
det_label_preprocessor.channels = %NUM_DET_CLASSES
det_label_preprocessor.visualize_label_masks = False
det_label_preprocessor.small_variance = 6
det_label_preprocessor.large_variance = 12

# Trainer
train_model.input_width = %INPUT_WIDTH
train_model.input_height = %INPUT_HEIGHT
train_model.data_loaders = %DATA_LOADERS
train_model.net = @NimbRoNet2()
train_model.data_loaders = %DATA_LOADERS
Trainer.seg_criterion = @torch.nn.CrossEntropyLoss()
Trainer.det_criterion = @torch.nn.MSELoss()
Trainer.optimizer_class = @torch.optim.Adam
Trainer.lr_step_size = 5
Trainer.lr = 1e-03
Trainer.patience = 5
Trainer.num_epochs = 100
Trainer.weight_decay = 0.001
Trainer.evaluate = False
Trainer.run_name = %RUN_NAME
Trainer.wandb_key = %WANDB_KEY

# Evaluation
evaluate_model.net = @NimbRoNet2()
evaluate_model.num_classes = %NUM_SEG_CLASSES
evaluate_model.input_height = %INPUT_HEIGHT
evaluate_model.input_width = %INPUT_WIDTH
evaluate_model.seg_criterion = @torch.nn.CrossEntropyLoss()
evaluate_model.det_criterion = @torch.nn.MSELoss()
evaluate_model.visualize = True
evaluate_model.data_loaders = %DATA_LOADERS
evaluate_model.run_name = %RUN_NAME
evaluate_model.wandb_key = %WANDB_KEY
