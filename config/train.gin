import soccer_robot_perception.datasets.detection_dataset
import soccer_robot_perception.datasets.segmentation_dataset
import soccer_robot_perception.data_loader.data_loader
import soccer_robot_perception.transforms.transforms
import soccer_robot_perception.architectures.nimbro2
import soccer_robot_perception.architectures.location_aware_conv2d
import soccer_robot_perception.train_manager.train_model
import soccer_robot_perception.utils.detection_utils

# INPUT_HEIGHT = 480
# INPUT_WIDTH = 640

INPUT_HEIGHT = 224
INPUT_WIDTH = 224

# Data transformation
TRANSFORM_CONFIGURATION = {
'0': {'transform_type': 'Resize', 'params': {'output_size': [%INPUT_HEIGHT, %INPUT_WIDTH]}},
#'1': {'transform_type': 'NormalizeImage', 'params': {'mean' :[128, 128, 128], 'stddev': [128, 128, 128]}}
}
configure_transforms.config = %TRANSFORM_CONFIGURATION

# Dataset
DetectionDataset.root_dir = '/Users/deepan/Documents/CudaVision/data_sample/blob/'
DetectionDataset.transform = @configure_transforms()

SegmentationDataset.root_dir = '/Users/deepan/Documents/CudaVision/data_sample/segmentation/'
SegmentationDataset.transform = @configure_transforms()

DETECTION_DATASET = @DetectionDataset()
SEGMENTATION_DATASET = @SegmentationDataset()

# DataLoader
torch.utils.data.ConcatDataset.datasets = [%DETECTION_DATASET, %SEGMENTATION_DATASET]
get_train_valid_test_loader.dataset = @torch.utils.data.ConcatDataset()
#get_train_valid_test_loader.dataset = %SEGMENTATION_DATASET
get_train_valid_test_loader.collate_fn=@custom_collate_alldata
get_train_valid_test_loader.batch_size = 4
get_train_valid_test_loader.random_seed = 39248
get_train_valid_test_loader.valid_size = 0.2
get_train_valid_test_loader.test_size = 0.0
get_train_valid_test_loader.num_workers = 0

DATA_LOADERS = @get_train_valid_test_loader()

# Architecture
NimbRoNet2.input_width = %INPUT_WIDTH
NimbRoNet2.input_height = %INPUT_HEIGHT
NimbRoNet2.location_awareness = True

# DETECTION UTILS
det_label_preprocessor.input_width = %INPUT_WIDTH
det_label_preprocessor.input_height = %INPUT_HEIGHT
det_label_preprocessor.channels = 3
det_label_preprocessor.visualize_label_masks = False

# Trainer
train_model.input_width = %INPUT_WIDTH
train_model.input_height = %INPUT_HEIGHT
train_model.data_loaders = %DATA_LOADERS
train_model.net = @NimbRoNet2()
train_model.data_loaders = %DATA_LOADERS

# calculate_weight.data_loaders = %DATA_LOADERS
# calculate_weight.num_characters = %NUM_CHARACTERS
# calculate_weight.loader_idx = 0
# calculate_weight.report_path = "model/"
# torch.nn.CrossEntropyLoss.weight = @calculate_weight()
Trainer.seg_criterion = @torch.nn.CrossEntropyLoss()
Trainer.det_criterion = 1
Trainer.optimizer_class = @torch.optim.Adam
Trainer.lr_step_size = 100
Trainer.lr = 1e-03
Trainer.patience = 10
Trainer.num_epochs = 200
Trainer.weight_decay = 0