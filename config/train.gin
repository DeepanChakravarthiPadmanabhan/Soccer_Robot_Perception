import soccer_robot_perception.datasets.detection_dataset
import soccer_robot_perception.datasets.segmentation_dataset
import soccer_robot_perception.data_loader.data_loader
import soccer_robot_perception.transforms.transforms
import soccer_robot_perception.architectures.nimbro2
import soccer_robot_perception.architectures.location_aware_conv2d
import soccer_robot_perception.train_manager.train_model
import soccer_robot_perception.utils.detection_utils
import soccer_robot_perception.utils.segmentation_utils

INPUT_HEIGHT = 480
INPUT_WIDTH = 640

NUM_SEG_CLASSES = 3
NUM_DET_CLASSES = 3

# TRAINER DETAILS FOR WANDB CONFIG AND TRAINER CONFIG
NUM_EPOCHS = 100
OPTIMIZER = @torch.optim.Adam
BATCH_SIZE = 64
LEARNING_RATE = 1e-03
STEP_SIZE = 5
PATIENCE = 5
WEIGHT_DECAY = 0
VALID_RATIO = 0.3
TEST_RATIO = 0.2
TRAIN_AND_EVALUATE = True
RESNET_BB_FIXED = False

RUN_NAME = "soccer-robot"
WANDB_KEY = "2aeb47c951aa8a38cedb69c0a8732f798c4bb052"

# Data transformation
TRANSFORM_CONFIGURATION = {
'0': {'transform_type': 'Resize', 'params': {'output_size': [%INPUT_HEIGHT, %INPUT_WIDTH]}},
}
configure_transforms.config = %TRANSFORM_CONFIGURATION

# Dataset
DetectionDataset.root_dir = '/scratch/dpadma2s/cuda_data/data/blob/'
DetectionDataset.transform = @configure_transforms()

SegmentationDataset.root_dir = '/scratch/dpadma2s/cuda_data/data/segmentation/'
SegmentationDataset.transform = @configure_transforms()

DETECTION_DATASET = @DetectionDataset()
SEGMENTATION_DATASET = @SegmentationDataset()

# DataLoader
torch.utils.data.ConcatDataset.datasets = [%DETECTION_DATASET, %SEGMENTATION_DATASET]
get_train_valid_test_loader_both.dataset = @torch.utils.data.ConcatDataset()
get_train_valid_test_loader_both.collate_fn=@custom_collate_alldata
get_train_valid_test_loader_both.batch_size = 4
get_train_valid_test_loader_both.random_seed = 39248
get_train_valid_test_loader_both.valid_size = %VALID_RATIO
get_train_valid_test_loader_both.test_size = %TEST_RATIO
get_train_valid_test_loader_both.num_workers = 0
CONCAT_DATA_LOADERS = @get_train_valid_test_loader_both()

get_train_valid_test_loader_det.dataset = %DETECTION_DATASET
get_train_valid_test_loader_det.collate_fn=@custom_collate_detection
get_train_valid_test_loader_det.batch_size = 32
get_train_valid_test_loader_det.random_seed = 39248
get_train_valid_test_loader_det.valid_size = %VALID_RATIO
get_train_valid_test_loader_det.test_size = %TEST_RATIO
get_train_valid_test_loader_det.num_workers = 0
DET_DATA_LOADERS = @get_train_valid_test_loader_det()

get_train_valid_test_loader_seg.dataset = %SEGMENTATION_DATASET
get_train_valid_test_loader_seg.collate_fn=@custom_collate_segmentation
get_train_valid_test_loader_seg.batch_size = 16
get_train_valid_test_loader_seg.random_seed = 39248
get_train_valid_test_loader_seg.valid_size = %VALID_RATIO
get_train_valid_test_loader_seg.test_size = %TEST_RATIO
get_train_valid_test_loader_seg.num_workers = 0
SEG_DATA_LOADERS = @get_train_valid_test_loader_seg()


# Architecture
NimbRoNet2.input_width = %INPUT_WIDTH
NimbRoNet2.input_height = %INPUT_HEIGHT
NimbRoNet2.location_awareness = True
NimbRoNet2.resnet_bb_fixed = %RESNET_BB_FIXED

# DETECTION UTILS
det_label_preprocessor.input_width = %INPUT_WIDTH
det_label_preprocessor.input_height = %INPUT_HEIGHT
det_label_preprocessor.channels = %NUM_DET_CLASSES
det_label_preprocessor.visualize_label_masks = False
det_label_preprocessor.small_variance = 6
det_label_preprocessor.large_variance = 12

# Trainer
train_model.input_width = %INPUT_WIDTH
train_model.input_height = %INPUT_HEIGHT
train_model.net = @NimbRoNet2()
train_model.seg_data_loaders = %SEG_DATA_LOADERS
train_model.det_data_loaders = %DET_DATA_LOADERS

Trainer.seg_criterion = @torch.nn.CrossEntropyLoss()
Trainer.det_criterion = @torch.nn.MSELoss()
Trainer.optimizer_class = %OPTIMIZER
Trainer.lr_step_size = %STEP_SIZE
Trainer.lr = %LEARNING_RATE
Trainer.patience = %PATIENCE
Trainer.num_epochs = %NUM_EPOCHS
Trainer.weight_decay = %WEIGHT_DECAY
Trainer.evaluate = %TRAIN_AND_EVALUATE
Trainer.run_name = %RUN_NAME
Trainer.wandb_key = %WANDB_KEY

# Evaluation
evaluate_model.net = @NimbRoNet2()
evaluate_model.num_classes = %NUM_SEG_CLASSES
evaluate_model.input_height = %INPUT_HEIGHT
evaluate_model.input_width = %INPUT_WIDTH
evaluate_model.seg_criterion = @torch.nn.CrossEntropyLoss()
evaluate_model.det_criterion = @torch.nn.MSELoss()
evaluate_model.visualize = True
evaluate_model.seg_data_loaders = %SEG_DATA_LOADERS
evaluate_model.det_data_loaders = %DET_DATA_LOADERS
evaluate_model.run_name = %RUN_NAME
evaluate_model.wandb_key = %WANDB_KEY


wandb_config = {'num_epochs':%NUM_EPOCHS,
'optimizer_class': %OPTIMIZER,
'batch_size': %BATCH_SIZE,
'learning_rate': %LEARNING_RATE,
'step': %STEP_SIZE,
'patience' : %PATIENCE,
'weight_decay': %WEIGHT_DECAY,
'validation_ratio': %VALID_RATIO,
'test_ratio': %TEST_RATIO,
'Train_and_evaluate': %TRAIN_AND_EVALUATE,
'resnet_bb_fixed': %RESNET_BB_FIXED
}
Trainer.wandb_config = %wandb_config


